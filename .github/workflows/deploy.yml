name: Deploy LLM Service

on:
  push:
    branches: [ main, demo-changes ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: llm-inference
  EKS_CLUSTER_NAME: llm-inference-cluster
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to ECR
      run: |
        # Ensure ECR repository exists
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY --region $AWS_REGION || \
        aws ecr create-repository --repository-name $ECR_REPOSITORY --region $AWS_REGION

        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build BentoML Service and Push to ECR
      run: |
        # Build BentoML service
        bentoml build
        
        # Get the service tag
        BENTO_SERVICE=$(bentoml list --output json | jq -r '.[0].tag')
        echo "Built BentoML service: $BENTO_SERVICE"
        
        # Containerize with BentoML (builds for AMD64 by default)
        bentoml containerize $BENTO_SERVICE --platform linux/amd64
        
        # Generate image tag
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-8)
        
        # Tag for ECR
        docker tag $BENTO_SERVICE $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker tag $BENTO_SERVICE $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Install kubectl and Helm
      run: |
        # Install kubectl
        curl -LO "https://dl.k8s.io/release/v1.28.0/bin/linux/amd64/kubectl"
        chmod +x kubectl
        sudo mv kubectl /usr/local/bin/
        
        # Install Helm
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Verify EKS Cluster Access
      run: |
        aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME
        kubectl get nodes
        kubectl get pods -n llm --no-headers | wc -l

    - name: Deploy to EKS
      run: |
        # Get the commit SHA for image tagging
        IMAGE_TAG=$(echo $GITHUB_SHA | cut -c1-8)
        echo "Deploying with image tag: $IMAGE_TAG"

        helm upgrade --install llm-inference-service ./k8s/llm-inference-service \
          --set image.repository=$ECR_REGISTRY/$ECR_REPOSITORY \
          --set image.tag=$IMAGE_TAG \
          --wait --timeout=900s

        # Validate deployment
        kubectl get pods -n llm -l app=llm-inference-service
        kubectl get svc -n llm -l app=llm-inference-service
